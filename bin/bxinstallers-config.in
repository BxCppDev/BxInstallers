#!/usr/bin/env bash
 
oldPwd=$(pwd)
bxinstallersPrefix="@CMAKE_INSTALL_PREFIX@"

function appExit()
{
    local _error_code=0
    if [ -n "$1" ]; then
	_error_code=$1
    fi 
    shift 1
    local _error_message="$@"
    if [ -n "${_error_message}" ]; then
	echo >&2 "[error] ${_error_message}"
    fi 
    cd ${oldPwd}
    exit ${_error_code}
}

appDebug=true
appDebug=false
appVersion="1.0"
appAction=

function appUsage()
{
    cat<<EOF
Usage : 

  bxinstallers-config [options...] [arguments...]

Options:

  --help        :   Prints this help
  --version     :   Prints version
  --prefix      :   Prints the installation prefix
  --bindir      :   Prints the installation binary directory
  --libdir      :   Prints the installation library directory  
  --resourcedir :   Prints the installation resource directory  
  --lib         :   Prints the path of the 'libbxiw.bash' Bash library  

EOF
    return 0
}

function appParseOptions()
{
    if [ "x$1" = "x" ]; then
	appUsage
	appExit 2 "Missing option!"
    fi
    while [ -n "$1" ]; do
	local _token="$1"
	test ${appDebug} = true && echo >&2 "[debug] token='${_token}'"
	if [ "x${_token:0:1}" = "x-" ]; then
	    local _option="${_token}"
	    test ${appDebug} = true && echo >&2 "[debug] option='${_option}'"
	    if [ "${_option}" = "--help" -o "${_option}" = "-h" ]; then
		appUsage
		appExit
	    elif [ "${_option}" = "--version" ]; then
		echo "${appVersion}"
		appExit
	    elif [ "${_option}" = "--prefix" ]; then
		echo "${bxinstallersPrefix}"
		appExit
	    elif [ "${_option}" = "--libdir" ]; then
		echo "${bxinstallersPrefix}/lib"
		appExit
	    elif [ "${_option}" = "--bindir" ]; then
		echo "${bxinstallersPrefix}/bin"
		appExit
	    elif [ "${_option}" = "--lib" ]; then
		echo "${bxinstallersPrefix}/lib/libbxiw.bash"
		appExit
	    elif [ "${_option}" = "--resourcedir" ]; then
		echo "${bxinstallersPrefix}/share/bxinstallers"
		appExit
	    else
		appUsage
		appExit 1 "Unsupported option '${_option}'!"
	    fi
	else
	    local _argument="${_token}"
	    test ${appDebug} = true && echo >&2 "[debug] argument='${_argument}'"
	    if [ "${_argument}" = "skel" ]; then
	    	appAction="skel"
	    fi
	fi
	shift 1
    done
    return 0
}

function appMakeSkel()
{
    return 0
}

function appRun()
{
    if [ "x${appAction}" = "xskel" ]; then
	appMakeSkel
    fi
    return 0
}

appParseOptions $@
if [ $? -ne 0 ]; then
    appExit 1
fi

appRun

appExit 

# end
