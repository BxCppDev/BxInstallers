#!/usr/bin/env bash

if [ ! -f "$(pwd)/.bxwi_geant4.locate" ]; then
    echo >&2 "[error] Please run from the GEANT4 installer directory!"
    exit 1
fi
source $(pwd)/../lib/libbxiw.bash
bxiw_app_name="geant4_installer"
bxiw_app_saved_opwd=$(pwd)
bxiw_app_installer_prefix="$(pwd)"
bxiw_package_name="geant4"
bxiw_default_package_version="10.5"
bxiw_package_version=

g4_with_system_clhep=true
g4_system_clhep_dir=
g4_with_buildin_datasets=false
g4_external_datasets_dir=
g4_with_qt=false

function geant4_installer_usage()
{
    cat<<EOF

geant4_installer - GEANT4 library installer

Synopsis:

    geant4_installer [OPTION]...

Options:

  --help                       Print this help then exit
  --with-builtin-clhep         Build Geant4 with builtin CLHEP (default: no)   
  --system-clhep-dir path      Set the system CLHEP installation directory (default: automatic)   
  --with-buildin-datasets      Build Geant4 with builtin datasets (default: no) 
  --external-datasets-dir path Set the installation directory of external datasets (default: automatic)  
  --with-qt                    Build Geant4 with Qt support (default: no)     
EOF
    _bxiw_usage_options
    echo ""
    return 0
}


function geant4_installer_parse_cl()
{
    while [ -n "$1" ]; do
	token="$1"
	if [ "x${token:0:1}" = "x-" ]; then
	    opt="${token}"
	    if [ ${opt} = "--help" ]; then
		geant4_installer_usage
		bxiw_exit 0
	    elif [ ${opt} = "--system-clhep-dir" ]; then
		shift 1
		g4_system_clhep_dir="$1"
		g4_with_system_clhep=true
	    elif [ ${opt} = "--with-builtin-clhep" ]; then
		g4_with_system_clhep=false
	    elif [ ${opt} = "--external-datasets-dir" ]; then
		shift 1
		g4_external_datasets_dir="$1"
		g4_with_buildin_datasets=false
	    elif [ ${opt} = "--with-builtin-datasets" ]; then
		g4_with_buildin_datasets=true
	    elif [ ${opt} = "--with-qt" ]; then
		g4_with_qt=true
	    else
		bxiw_message "error" "Unsupported option '${opt}'!"
		return 1
	    fi
	else
	    arg="${token}"
	fi
	shift 1
    done
    return 0
}

function geant4_installer_prepare()
{
    _bxiw_prepare_pre
 
    if [ ${bxiw_with_gui} = true ]; then
	
	local _do_rebuild_repr="FALSE"
	if [ ${bxiw_do_rebuild} = true ]; then
	    _do_rebuild_repr="TRUE"
	fi
	
	local _remove_build_dir_repr="FALSE"
	if [ ${bxiw_remove_build_dir} = true ]; then
	    _remove_build_dir_repr="TRUE"
	fi
	
	local _remove_tarballs_repr="FALSE"
	if [ ${bxiw_remove_tarballs} = true ]; then
	    _remove_tarballs_repr="TRUE"
	fi
	
	local _system_install_repr="FALSE"
	if [ ${bxiw_system_install} = true ]; then
	    _system_install_repr="TRUE"
	fi

	which yad > /dev/null 2>&1
	if [ $? -ne 0 ]; then
	    bxiw_message "[warning] yad is not installed! No GUI!"
	else
	    local _choices=$(yad --width=500 \
				 --form \
				 --title "${bxiw_package_name} installer options" \
				 --field="Cache directory:CDIR"   "${bxiw_cache_dir}" \
				 --field="Working directory:CDIR" "${bxiw_work_dir}" \
				 --field="Installation directory:CDIR" "${bxiw_install_dir}" \
				 --field="Force rebuild:CHK" "${_do_rebuild_repr}" \
				 --field="Remove build directory:CHK" "${_remove_build_dir_repr}" \
				 --field="Remove tarballs:CHK" "${_remove_tarballs_repr}" \
				 --field="System installation:CHK" "$_system_install_repr}" \
		  )
	    if [ "x${_choices}" = "x" ]; then
		bxiw_message "info" "Cancelled dialog!"
		return 1
	    fi
	    bxiw_cache_dir=$(echo ${_choices} | cut -d'|' -f1)
	    bxiw_work_dir=$(echo ${_choices} | cut -d'|' -f2)
	    bxiw_install_dir=$(echo ${_choices} | cut -d'|' -f3)
	    _do_rebuild_repr=$(echo ${_choices} | cut -d'|' -f4)
	    if [ ${_do_rebuild_repr} == "TRUE" ]; then
		bxiw_do_rebuild=true
	    else
		bxiw_do_rebuild=false
	    fi
	    _remove_build_dir_repr=$(echo ${_choices} | cut -d'|' -f5)
	    if [ ${_remove_build_dir_repr} == "TRUE" ]; then
		bxiw_remove_build_dir=true
	    else
		bxiw_remove_build_dir=false
	    fi
	    _remove_tarballs_repr=$(echo ${_choices} | cut -d'|' -f6)
	    if [ ${_remove_tarballs_repr} == "TRUE" ]; then
		bxiw_remove_tarballs=true
	    else
		bxiw_remove_tarballs=false
	    fi
	    _system_install_repr=$(echo ${_choices} | cut -d'|' -f7)
	    if [ ${_system_install_repr} == "TRUE" ]; then
		bxiw_system_install=true
	    else
		bxiw_system_install=false
	    fi
	fi
    fi

    if [ "x${g4_system_clhep_dir}" = "x" ]; then	    
	which clhep-config >/dev/null 2>&1
	if [ $? -ne 0 ]; then
	    bxiw_message "error" "Cannot find the 'clhep-config' executable!"
	    return 1
	fi
	local _clhep_prefix=$(clhep-config --prefix | tr -d '"')
	g4_system_clhep_dir="${_clhep_prefix}"
    fi
   
    if [ ${g4_with_buildin_datasets} == false ]; then
	if [ "x${g4_external_datasets_dir}" = "x" ]; then
	    which g4datasets-config > /dev/null 2>&1
	    if [ $? -eq 0 ]; then
		g4_external_datasets_dir=$(g4datasets-config --datadir)
		bxiw_message "info" "External datasets directory is set to '${external_datasets_dir}'"
	    fi
	fi
	    
	if [ "x${g4_external_datasets_dir}" = "x" ]; then
		echo >&2 "[error] Missing datasets directory!"
		return 1
	else
	    if [ ! -d ${g4_external_datasets_dir} ]; then
		echo >&2 "[error] External datasets directory '${g4_external_datasets_dir}' is not defined!"
		return 1
	    fi
	fi
    fi
    
    # if [ ${g4_with_qt} == true ]; then
    # fi
    
    # Prepare:
    _bxiw_prepare_post
     
    return 0
}


function geant4_installer_get_tarball()
{
    local _geant4_version="$1"
    shift 1
    if [ "x${_geant4_version}" = "x10.5" ]; then
	echo "geant4.10.05.tar.gz"
    fi
    return 0
}


function geant4_installer_get_url()
{
    local _geant4_version="$1"
    shift 1
    local _geant4_tarball=$(geant4_installer_get_tarball ${_geant4_version})
    echo "http://geant4.cern.ch/support/source/${_geant4_tarball}"
    return 0
}


function geant4_installer_set_system_dependencies()
{
    if [ "x${bxiw_os_distrib_id}" = "xUbuntu" ]; then
	bxiw_system_packages_build="cmake \
   	  	    ninja-build \
   	  	    make \
        	    pkg-config \
        	    dpkg-dev \
       	    	    wget \
   		    g++ \
		    gcc \
		    binutils \
		    expat libexpat1 libexpat1-dev \
		    libx11-6 libx11-dev \
		    libxext6 libxext-dev \
		    zlib1g zlib1g-dev \
		    "
	# libfreetype6 libfreetype6-dev 
	bxiw_system_packages_run="\
	  g++ \
	  expat \
	  libexpat1 \
	  libx11-6 \
	  libxext6 \
	  zlib1g \
        "	  
        # libfreetype6 
	if [ ${bxiw_with_package} == true ]; then
	    bxiw_system_packages_build="${bxiw_system_packages_build} checkinstall"
	fi
	if [ ${bxiw_with_gui} == true ]; then
	    bxiw_system_packages_build="${bxiw_system_packages_build} yad"
	fi
	if [ ${bxiw_with_qt} == true ]; then
	    bxiw_system_packages_build="${bxiw_system_packages_build} qtbase5-dev"
	    bxiw_system_packages_build="${bxiw_system_packages_build} libqt5core5a"
	    bxiw_system_packages_build="${bxiw_system_packages_build} libqt5gui5"
	    bxiw_system_packages_build="${bxiw_system_packages_build} libqt5opengl5-dev"
	    bxiw_system_packages_build="${bxiw_system_packages_build} libqt5printsupport5"
	    bxiw_system_packages_build="${bxiw_system_packages_build} libqt5widgets5"

	    bxiw_system_packages_run="${bxiw_system_packages_run} libqt5core5a"
	    bxiw_system_packages_run="${bxiw_system_packages_run} libqt5gui5"
	    bxiw_system_packages_run="${bxiw_system_packages_run} libqt5opengl5-dev"
	    bxiw_system_packages_run="${bxiw_system_packages_run} libqt5printsupport5"
	    bxiw_system_packages_run="${bxiw_system_packages_run} libqt5widgets5"
	fi
	if [ "x${bxiw_os_distrib_release}" = "x16.04" ]; then
	    bxiw_system_packages_build="${bxiw_system_packages_build} libxerces-c3.1 libxerces-c-dev"
	    bxiw_system_packages_build="${bxiw_system_packages_build} libglu1-mesa libglu1-mesa-dev"
	    ### needed : freeglut3-dev mesa-common-dev ?
	    bxiw_system_packages_run="${bxiw_system_packages_run} libxerces-c3.1 libglu1-mesa"
	elif [ "x${bxiw_os_distrib_release}" = "x18.04" ]; then
	    bxiw_system_packages_build="${bxiw_system_packages_build} libxerces-c3.2 libxerces-c-dev" 
	    bxiw_system_packages_build="${bxiw_system_packages_build} libglu1-mesa libglu1-mesa-dev"
	    bxiw_system_packages_build="${bxiw_system_packages_build} libglvnd0 libglvnd-dev"
	    bxiw_system_packages_run="${bxiw_system_packages_run} libxerces-c3.2 libglu1-mesa libglvnd0"
	fi
    # elif [ "x${bxiw_os_distrib_id}" = "xCentOS" ]; then
    # elif [ "x${bxiw_os_distrib_id}" = "xScientific" ]; then
    fi
    return 0
}


function geant4_installer_print()
{
    bxiw_print
    bxiw_log_info "g4_with_system_clhep        = ${g4_with_system_clhep}"
    bxiw_log_info "g4_system_clhep_dir         = '${g4_system_clhep_dir}'"
    bxiw_log_info "g4_with_buildin_datasets    = ${g4_with_buildin_datasets}"
    bxiw_log_info "g4_external_datasets_dir    = '${g4_external_datasets_dir}'"
    bxiw_log_info "g4_with_qt                  = ${g4_with_qt}"
    return 0
}


function geant4_installer_download()
{
    local _geant4_tarball=$(geant4_installer_get_tarball ${bxiw_package_version})
    local _geant4_url=$(geant4_installer_get_url ${bxiw_package_version})
    if [ ! -f ${bxiw_tag_downloaded} ]; then
	bxiw_download_file ${_geant4_url} ${_geant4_tarball}
	if [ $? -ne 0 ]; then
	    bxiw_log_error "Could not download the '${_geant4_tarball}' file!"
	    return 1
	fi
	touch ${bxiw_tag_downloaded}
    else
	bxiw_log_info "Geant4 tarball '${_geant4_tarball}' is already downloaded."	
    fi
    return  0
}


function geant4_installer_install()
{
    local _geant4_opwd=$(pwd)
    local _geant4_tarball=$(geant4_installer_get_tarball ${bxiw_package_version})
    cd ${bxiw_cache_dir}
    local _geant4_source_dir="$(pwd)/geant4.10.05"
    bxiw_message "info" "GEANT4 version is                : '${bxiw_package_version}'"
    bxiw_message "info" "GEANT4 source directory is       : '${_geant4_source_dir}'"
    if [ ! -d ${_geant4_source_dir} ]; then
	bxiw_message "info" "Unpacking source directory..."
	tar xzf ${bxiw_cache_dir}/${_geant4_tarball}
	if [ $? -ne 0 ]; then
	    bxiw_message "error" "Source directory has not been unpacked."
	    cd ${_geant4_opwd}
	    return 1
	else
	    bxiw_message "info" "Source directory has been unpacked."
	fi
    else
	bxiw_message "info" "Source directory was already unpacked."
    fi

    cd ${bxiw_build_dir}
    bxiw_message "info" "GEANT4 build directory is        : '${bxiw_build_dir}'"
    bxiw_message "info" "GEANT4 tag directory is          : '${bxiw_tag_dir}'"
    bxiw_message "info" "GEANT4 installation directory is : '${bxiw_install_dir}'"
    
    # Configuration:
    local _geant4_do_config=false
    if [ ! -f ${bxiw_tag_configured} ]; then
	bxiw_message "info" "GEANT4 configuration is needed."
	_geant4_do_config=true
    else
	bxiw_message "info" "GEANT4 configuration is already done (tag file: '${bxiw_tag_configured}')."
	if [ ${bxiw_do_reconfigure} == true ]; then
	    bxiw_message "info" "Forcing GEANT4 reconfiguration..."
	    _geant4_do_configure=true
	    rm -f ${bxiw_tag_configured}
	fi
    fi

    if [ ${_geant4_do_config} == true ]; then
	bxiw_message "info" "GEANT4 configuration..."
	local _geant4_datasets_opt="-DGEANT4_INSTALL_DATA=OFF"
	if [ ${g4_with_system_clhep} = true ]; then
	    _geant4_clhep_opt="-DGEANT4_USE_SYSTEM_CLHEP=ON -DCLHEP_ROOT_DIR=${g4_system_clhep_dir}"
	fi
	local _geant4_datasets_opt="-DGEANT4_INSTALL_DATA=ON"
	if [ ${g4_with_buildin_datasets} = false ]; then
	    _geant4_datasets_opt="-DGEANT4_INSTALL_DATA=OFF -DGEANT4_INSTALL_DATADIR=${g4_external_datasets_dir}"
	fi
	local _geant4_qt_opt="-DGEANT4_USE_QT=OFF"
	if [ ${g4_with_qt} == true ]; then
	    _geant4_qt_opt="-DGEANT4_USE_QT=ON"
	fi
	cmake  \
	    -DCMAKE_INSTALL_PREFIX:PATH="${bxiw_install_dir}" \
	    -DCMAKE_INSTALL_LIBDIR=lib \
	    -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
	    -DGEANT4_BUILD_CXXSTD=c++11 \
	    ${_geant4_datasets_opt} \
	    ${_geant4_clhep_opt} \
	    ${_geant4_qt_opt} \
	    -DGEANT4_USE_SYSTEM_EXPAT=ON \
	    -DGEANT4_USE_SYSTEM_ZLIB=ON \
	    -DGEANT4_USE_GDML=ON \
	    -DGEANT4_USE_OPENGL_X11=ON \
	    -G Ninja \
	    ${_geant4_source_dir}
	if [ $? -ne 0 ]; then
	    bxiw_message "error" "GEANT4 configuration failed!"
	    cd ${_geant4_opwd}
	    return 1
	else
	    touch ${bxiw_tag_configured}
    	    bxiw_message "info" "GEANT4 is configured."
	fi
    else
	bxiw_message "info" "Do not configure GEANT4."
    fi
    
    # Build:
    local _geant4_do_build=false
    if [ ! -f ${bxiw_tag_built} ]; then
	bxiw_message "info" "GEANT4 build is needed."
	_geant4_do_build=true
    else
	bxiw_message "info" "GEANT4 build is already done."
	if [ ${bxiw_do_rebuild} == true ]; then
	    bxiw_message "info" "Forcing GEANT4 rebuild..."
	    _geant4_do_build=true
	    rm -f ${bxiw_tag_built}
	fi
    fi

    if [ ${_geant4_do_build} == true ]; then
	bxiw_message "info" "Building GEANT4..."
	local _geant4_nbprocs=${bxiw_nbprocs}
	if [ ${_geant4_nbprocs} -gt 2 ]; then
	    let _geant4_nbprocs=${bxiw_nbprocs}
	else
	    _geant4_nbprocs=1 
	fi
	bxiw_message "info" "#procs = ${_geant4_nbprocs}"
	ninja -j ${_geant4_nbprocs}
	if [ $? -ne 0 ]; then
    	    bxiw_message "error" "GEANT4 build failed!"
    	    cd ${_geant4_opwd}
    	    return 1
	else
	    touch ${bxiw_tag_built}
    	    bxiw_message "info" "GEANT4 is built."
	fi
    else
	bxiw_message "info" "Do not build GEANT4."
    fi

    # Installation:
    local _geant4_do_install=false
    if [ ! -f ${bxiw_tag_installed} ]; then
	bxiw_message "info" "GEANT4 installation is needed."
	_geant4_do_install=true
    else
	bxiw_message "info" "GEANT4 installation is already done."
	if [ ${bxiw_do_reinstall} == true ]; then
	    _geant4_do_install=true
	    bxiw_message "info" "Forcing GEANT4 installation..."
	    rm -f ${bxiw_tag_installed}
	fi
    fi
    if [ ${bxiw_no_install} == true ]; then
	_geant4_do_install=false
    fi
    if [ ${bxiw_with_package} == true ]; then
	_geant4_do_install=true
    fi

    if [ ${_geant4_do_install} == true ]; then
	local _geant4_do_package=false
	if [ ${bxiw_with_package} == true ]; then
	    _geant4_do_package=true
	fi
	if [ ${_geant4_do_package} == true ]; then
	    if [ "x${bxiw_os_distrib_id}" = "xUbuntu" ]; then
		bxiw_message "info" "Building a binary package for GEANT4..."
		geant4_installer_makedebpack
	    else
    		bxiw_message "error" "Cannot pack GEANT4 for '${bxiw_os_distrib_id}'!"
    		cd ${_geant4_opwd}
		return 1
	    fi
	else
	    bxiw_message "info" "Installing GEANT4..."
	    ninja install
	    if [ $? -ne 0 ]; then
    		bxiw_message "error" "GEANT4 installation failed!"
    		cd ${_geant4_opwd}
    		return 1
	    else
		touch ${bxiw_tag_installed}
    		bxiw_message "info" "GEANT4 is installed."
	    fi
	fi
    else
	bxiw_message "info" "Do not install GEANT4."
    fi
    cd ${_geant4_opwd}
    return  0
}


function geant4_installer_makedebpack()
{
    local _geant4_build_dir="${bxiw_build_dir}"
    cd ${_geant4_build_dir}
    mkdir -p ${_geant4_build_dir}/doc-pak
    touch ${_geant4_build_dir}/description-pak
    cat>${_geant4_build_dir}/description-pak<<EOF
GEANT4 Simulation Toolkit (Bayeux edition)

This is a binary version for ${bxiw_os_distrib_id} ${bxiw_os_distrib_release} 
usable with the Bayeux software suite.
EOF

    local _arch="amd64"
    local _geant4_do_package=true
    local _geant4_pkg_filename="bx${bxiw_package_name}_${bxiw_package_version}-${bxiw_pkg_release}_${_arch}.deb"
    if [ -f ${package_dir}/${_geant4_pkg_filename} ]; then
	bxiw_message "info" "Package '${_geant4_pkg_filename}' exists in '${bxiw_package_dir}'."
	_geant4_do_package=false
    fi
    local _geant4_requires="${bxiw_system_packages_run}"
    _geant4_requires_list=$(echo ${_geant4_requires} | tr ' ' ',')
    _geant4_conflicts_list="libgeant4-dev,libgeant42.1v5"
    bxiw_message "info" "Requires : ${_geant4_requires_list}!"	
    if [ ${_geant4_do_package} == true ]; then
	if [ "x${bxiw_os_arch}" != "xx86_64" ]; then
	    bxiw_message "error" "Unsupported architecture ${bxiw_os_arch}!"	
	    return 1
	fi
	sudo checkinstall \
	     --type="debian" \
	     --install="no" \
	     --fstrans="no" \
	     --pkgname="bx${bxiw_package_name}" \
	     --pkgversion="${bxiw_package_version}" \
	     --pkgrelease=${bxiw_pkg_release} \
	     --pkglicense="GPL-3" \
	     --pkggroup="science" \
	     --pkgsource="$(geant4_installer_get_url ${bxiw_package_version})" \
	     --maintainer="${bxiw_pkg_maintener_email}" \
	     --provides="bx${bxiw_package_name}" \
	     --requires="${_geant4_requires_list}" \
	     --conflicts="${_geant4_conflicts_list}" \
	     --backup="no" \
	     --pakdir="${bxiw_package_dir}" \
	     --default \
	     ninja install
	if [ $? -ne 0 ]; then
	    bxiw_message "error" "Debian binary package build failed!"	
	    return 1
	fi
    fi	 
    return 0
}


function geant4_installer_setup()
{
    bxiw_log_trace "geant4_installer_setup: entering..."
    local _bxsoftware_setup_dir="${bxiw_setup_module_dir}"
    local _bxsoftware_setup_script="${_bxsoftware_setup_dir}/${bxiw_package_name}@${bxiw_package_version}.bash"
    bxiw_message "info" "Installing setup script '${_bxsoftware_setup_script}'..."
    cat ${bxiw_app_installer_prefix}/resources/${bxiw_package_name}.bash.in | \
	sed \
	    -e "s@__GEANT4_INSTALL_DIR__@${bxiw_install_dir}@g" \
	    -e "s@__GEANT4_VERSION__@${bxiw_package_version}@g" \
	    > ${_bxsoftware_setup_script}
    return  0
}

bxiw_detect_os
if [ $? -ne 0 ]; then
    bxiw_exit 1 "Unsupported OS!"
fi

bxiw_env
bxiw_parse_cl ${bxiw_app_cl_remaining_argv}
# bxiw_message "info" "bxiw_app_cl_remaining_argv=${bxiw_app_cl_remaining_argv}"
geant4_installer_parse_cl ${bxiw_app_cl_remaining_argv}
if [ $? -ne 0 ]; then
    bxiw_exit 1 "Command line parse error!"
fi

geant4_installer_prepare
if [ $? -ne 0 ]; then
    bxiw_exit 1 "Preparation failed!"
fi

geant4_installer_set_system_dependencies

geant4_installer_print

bxiw_install_system_dependencies
if [ $? -ne 0 ]; then
    bxiw_exit 1 "System dependencies installation failed!"
fi

geant4_installer_download
if [ $? -ne 0 ]; then
    bxiw_exit 1 "Source archive download failed!"
fi

geant4_installer_install
if [ $? -ne 0 ]; then
    bxiw_exit 1 "Installation failed!"
fi

if [ ${bxiw_with_package} == false ]; then
    geant4_installer_setup
    if [ $? -ne 0 ]; then
	bxiw_exit 1 "Setup failed!"
    fi
fi

bxiw_exit 0

# end
